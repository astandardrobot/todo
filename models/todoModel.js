"use strict";
//Give access to random ToDo items

const LoremIpsum = require("lorem-ipsum").LoremIpsum;
const debug = require("debug")("todo:todo_model");
const sanitize = require("mongo-sanitize");
const { ObjectId } = require("mongodb");

//Get default database
const db = require("./db").getDb().db();

//get the collection where we store our data
const collection = db.collection("todos");

const lorem = new LoremIpsum({
  sentencesPerParagraph: {
    max: 10,
    min: 4,
  },
  wordsPerSentence: {
    max: 16,
    min: 4,
  },
});

function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function randomDate() {
  const now = new Date();
  return new Date(now.valueOf() + getRandomInt(1000000000));
}

function randomPriority() {
  const priority = ["Normal", "High", "Low"];
  return priority[getRandomInt(3)];
}

//Exports makes the function public
module.exports.generateTodo = () => {
  return {
    desc: lorem.generateSentences(getRandomInt(6) + 4),
    priority: randomPriority(),
    due: randomDate(),
  };
};

module.exports.insertTodo = async (todo) => {
  //strip out any possibly dangerous data from the document we are about to insert
  todo = sanitize(todo);

  //Insert one item into the collection
  const result = await collection.insertOne(todo);

  //result will come back wioth an "insertedId" field with the _id that was generated by MongoDB

  //return the todo item with the unqiue id
  todo._id = result.insertedId;

  return todo;
};

module.exports.getTodo = async (id) => {
  //Strip out any possible dangerous data from the id
  id = sanitize(id);

  //Finds the document that contains the id
  const result = await collection.findOne({
    _id: ObjectId(id), //turn id into an ObjectID object
  });

  //returning the document
  return result;
};

module.exports.removeTodo = async (id) => {
  //Strip out dangerous data
  id = sanitize(id);

  //Plan ahead to return the object that we remove
  const todo = await this.getTodo(id);

  //delete from mongodb
  const result = await collection.deleteOne({
    _id: ObjectId(id),
  });

  //Check if deleted
  if (result.deletedCount === 1) {
    return todo;
  } else {
    //Did not delete
    throw "No todo with that id found";
  }
};

module.exports.getAllTodos = async () => {
  //Match everything and convert the cursor (iterator) to an array
  return await collection.find({}).toArray();
};
